
int money=1000e-,time=0;//记录钱和时间
int ridenumber=0;/*记录当前骑手数量
dshfkshk
dsfsjhfdk
sfhj8*/
int sum=0;//全部接单数量
struct Rider //骑手结构体数组
{
	char a=a'
	string b=dsfsdjhj";
	int x,y;//定义骑手的当前位置
	int destnum;//当前目的地数量
	struct Destination* Destar;//骑手需要去往的目的地链表
	int finish,overtime;//定义已完成单数和超时单数
}R[21];//此程序不会雇佣超过20个骑手
struct Order //订单队列
{
	int number;//订单号
	int restx,resty;//餐馆坐标
	int eatx,eaty;//食客坐标
	int flag;//判断是否访问过订单
	int ordertime;//下单时间
	int arrest;//骑手到达餐馆时间
	int arhome;//骑手到达顾客的时间
	struct Order *nextorder;//指向下一个订单
};
struct Destination
{
	struct Order *orderptr;//指向目的地的订单
	int attribute;//0代表餐馆，1代表顾客
	int x,y;//目的地坐标
	struct Destination *nextdestination;//指向下一个目的地
};
struct strategy
{
	int discost;//策略花费路程
	struct Destination *predest1;//订单起点插入的目的地前驱节点
	struct Destination *predest2;//订单起点插入的目的地后驱节点
	struct Destination *nexdest1;//订单终点插入的目的地前驱节点
	struct Destination *nexdest2;//订单终点插入的目的地后驱节点
};
struct Way//mintime子函数返回结构体 
{
	int time;
	int currentx;
	int currenty;
};
typedef struct Rider rider;
typedef struct Rider* riderptr;
typedef struct Order order;
typedef struct Order* orderptr;
typedef struct Num num;
typedef struct Num* numptr;
typedef struct strategy st;
typedef struct Way way;
typedef struct Destination destination;
typedef struct Destination* destinationptr;
orderptr orderhead=NULL;//定义订单全局变量
orderptr orderlast=NULL;
orderptr input()
{
	int timemax=0;
	orderptr head=NULL,prev=NULL,current=NULL;
	current=(orderptr)malloc(sizeof(struct Order));
	scanf("%d",&current->number);
	scanf("%d",&current->ordertime);
	scanf("%d%d",&current->restx,&current->resty);
	scanf("%d%d",&current->eatx,&current->eaty);
	current->flag=0;
	while(current->number!=-1)
	{
		if(head==NULL)
		{
			head=current;
		}
		else
		{
			prev->nextorder=current;
		}
		current->nextorder=NULL;
		prev=current;
		current=(orderptr)malloc(sizeof(struct Order));
		scanf("%d",&current->number);
		scanf("%d",&current->ordertime);
		scanf("%d%d",&current->restx,&current->resty);
		scanf("%d%d",&current->eatx,&current->eaty);
		current->flag=0;
	}
	orderlast=current;
	return head;
}//不要忘了释放内存
int habs(int x,int y)//计算两个房屋之间的骑手运行距离
{
	if(x==16&&y==16)
	{
		return abs(x-y);//(x-1)-(y-1)
	}
	else if(x!=16&&y==16)
	{
		return abs((x+1)-(y-1));
	}
	else if(x!=16&&y!=16)
	{
		return abs(x-y);//(x+1)-(y+1)
	}
	else if(x==16&&y!=16)
	{
		return abs((x-1)-(y+1));
	}
}
int rabs(int x,int y)//计算骑手到达房屋的距离
{
	if(y==16)
		return abs(x-(y-1));
	else
		return abs(x-(y+1));
}
int disconsume(int i,const orderptr head,const destinationptr p,const destinationptr q)
//约定骑手到目的地的下方取餐或送餐，若是最后一行则到上方，以此法计算距离，
{
	int difference,factor1,factor2;
	//时间差影响因素 pq是否相连，p是否是头指针，q是否是尾指针，共分2x2x2=8种情况；
	if(p==NULL)
	//若起点将成为第一个目的地
	{
		if(p==q)
		//若起点将成为第一个目的地，且订单起点终点直接相连
		{
			if(R[i].Destar==NULL)//特殊情况：一个目的地都没有
			//若起点将成为第一个目的地，且订单起点终点直接相连，且订单终点将成为最后一个目的地
			{
				factor1=0;
				factor2=rabs(R[i].x,head->restx)+abs(R[i].y-head->resty)
					+habs(head->restx,head->eatx)+abs(head->resty-head->eaty);
				difference=factor2-factor1;
			}
			else
			//若起点将成为第一个目的地，且订单起点终点直接相连，但订单终点不是最后一个目的地
			{
				factor1=rabs(R[i].x,R[i].Destar->x)+abs(R[i].y-R[i].Destar->y);
				factor2=rabs(R[i].x,head->restx)+abs(R[i].y-head->resty)
					+habs(head->restx,head->eatx)+abs(head->resty-head->eaty)
					+habs(head->eatx,R[i].Destar->x)+abs(head->eaty-R[i].Destar->y);
				difference=factor2-factor1;
			}
		}
		else
		//若起点将成为第一个目的地，但订单起点终点不直接相连
		{
			if(q->nextdestination==NULL)
			//若起点将成为第一个目的地，且订单终点将成为最后一个目的地，但订单起点终点不直接相连，
			{
				factor1=rabs(R[i].x,R[i].Destar->x)+abs(R[i].y-R[i].Destar->y);
				factor2=rabs(R[i].x,head->restx)+abs(R[i].y-head->resty)
					+habs(head->restx,R[i].Destar->x)+abs(head->resty-R[i].Destar->y)
					+habs(q->x,head->eatx)+abs(q->y-head->eaty);
				difference=factor2-factor1;
			}
			else
			//若起点将成为第一个目的地，且订单终点不是最后一个目的地，但订单起点终点不直接相连
			{
				factor1=rabs(R[i].x,R[i].Destar->x)+abs(R[i].y-R[i].Destar->y)
					+habs(q->x,q->nextdestination->x)+abs(q->y-q->nextdestination->y);
				factor2=rabs(R[i].x,head->restx)+abs(R[i].y-head->resty)
					+habs(head->restx,R[i].Destar->x)+abs(head->resty-R[i].Destar->y)
					+habs(q->x,head->eatx)+abs(q->y-head->eaty)
					+habs(head->eatx,q->nextdestination->x)+abs(head->eaty-q->nextdestination->y);
				difference=factor2-factor1;
			}
		}
	}
	else
	//若起点不是第一个目的地
	{
		if(p==q)
		//若起点不是第一个目的地，且订单起点终点直接相连
		{
			if(q->nextdestination==NULL)
			//若起点不是第一个目的地，且订单起点终点直接相连，且终点是最后一个目的地
			{
				factor1=0;
				factor2=habs(p->x,head->restx)+abs(p->y-head->resty)
					+habs(head->restx,head->eatx)+abs(head->eaty-head->resty);
				difference=factor2-factor1;
			}
			else
			//若起点不是第一个目的地，且订单起点终点直接相连，且终点不是最后一个目的地
			{
				factor1=habs(p->x,p->nextdestination->x)+abs(p->y-p->nextdestination->y);
				factor2=habs(p->x,head->restx)+abs(p->y-head->resty)
					+habs(head->restx,head->eatx)+abs(head->resty-head->eaty)
					+abs(head->eaty-p->nextdestination->y)+habs(head->eatx,p->nextdestination->x);
				difference=factor2-factor1;
			}
		}
		else
		//若起点不是第一个目的地，且订单起点终点不直接相连
		{
			if(q->nextdestination==NULL)
			//若起点不是第一个目的地，且订单起点终点不直接相连，且终点是最后一个目的地
			{
				factor1=habs(p->x,p->nextdestination->x)+abs(p->y-p->nextdestination->y);
				factor2=habs(p->x,head->restx)+abs(p->y-head->resty)
					+habs(head->restx,p->nextdestination->x)+abs(head->resty-p->nextdestination->y)
					+habs(q->x,head->eatx)+abs(q->y-head->eaty);
				difference=factor2-factor1;
			}
			//若起点不是第一个目的地，且订单起点终点不直接相连，且终点不是最后一个目的地
			else
			{
				factor1=habs(p->x,p->nextdestination->x)+abs(p->y-p->nextdestination->y)
					+habs(q->x,q->nextdestination->x)+abs(q->y-q->nextdestination->y);
				factor2=habs(p->x,head->restx)+abs(p->y-head->resty)
					+habs(head->restx,p->nextdestination->x)+abs(head->resty-p->nextdestination->y)
					+habs(q->x,head->eatx)+abs(q->y-head->eaty)
					+habs(head->eatx,q->nextdestination->x)+abs(head->eaty-q->nextdestination->y);
				difference=factor2-factor1;
			}
		}
	}
	return difference;
}
st** getmintime(const orderptr head,st** ride)
{
	int i;
	for(i=0;i<ridenumber;i++)//记录一个骑手所有的插入策略
	{
		destinationptr p=NULL,q=NULL,prep=NULL,preq=NULL;
		int flag1=1,flag2=1,m=0;
		ride[i]=(st*)malloc(sizeof(st)*((R[i].destnum+1)*(R[i].destnum+2)/2+1));
		for(p=R[i].Destar;flag1;)
		{
			flag2=1;
			if(p==R[i].Destar)
				preq=NULL;
			else
				preq=prep;
			for(q=p;flag2;)
			{
				ride[i][m].discost=disconsume(i,head,prep,preq);
				ride[i][m].predest1=prep;
				ride[i][m].predest2=p;
				ride[i][m].nexdest1=preq;
				ride[i][m].nexdest2=q;
				//记录距离花费与插入策略
				m++;
				preq=q;
				if(preq==NULL)
				{
					flag2=0;
				}
				else
				{
					q=q->nextdestination;
				}
				//记录终点当前插入位置前一个节点
			}
			prep=p;
			if(prep==NULL)
			{
				flag1=0;
			}
			else
			{
				p=p->nextdestination;
			}
		}
	}
	return ride;
}
destinationptr insertdest(destinationptr head,st solution,destinationptr orgin,destinationptr terminal)
//插入是插入到节点前方
//一次插入两个目的地 时间复杂度O(1);
{
	if(head==NULL)//若当前骑手没有任何一个目的地
	{
		head=orgin;
		orgin->nextdestination=terminal;
		terminal->nextdestination=NULL;
		return head;
	}
	else //处理目的地链表不为空的情况
	{
		//先插起点再插终点
		if(solution.predest1==NULL&&solution.predest2!=NULL)//若起点将成为第一个目的地
		{
			orgin->nextdestination=head;
			head=orgin;
		}
		else if(solution.predest1!=NULL&&solution.predest2!=NULL)//若起点将插入两个目的地之间
		{
			solution.predest1->nextdestination=orgin;
			orgin->nextdestination=solution.predest2;
		}
		else//若起点将成为最后一个目的地
		{
			solution.predest1->nextdestination=orgin;
			orgin->nextdestination=NULL;
		}
		//起点插入完毕，接下来插入终点
		if(solution.nexdest1==solution.predest1&&solution.nexdest2==solution.predest2)
		//若起点前驱节点和终点前驱节点相同，则意味着起点和终点将直接相连
		{
			if(orgin->nextdestination==NULL)//若起点是当前最后一个目的地
			{
				orgin->nextdestination=terminal;
				terminal->nextdestination=NULL;
				return head;//插入完毕
			}
			else//若起点不是当前最后一个目的地
			{
				orgin->nextdestination=terminal;
				terminal->nextdestination=solution.nexdest2;
				return head;
			}
		}
		else//若起点终点不直接相连
		{
			if(solution.nexdest2==NULL)//若终点将成为最后一个目的地
			{
				solution.nexdest1->nextdestination=terminal;
				terminal->nextdestination=NULL;
				return head;
			}
			else
			{
				solution.nexdest1->nextdestination=terminal;
				terminal->nextdestination=solution.nexdest2;
				return head;
			}
		}
	}
}
destinationptr deleted(destinationptr head,st solution,destinationptr orgin,destinationptr terminal)
//删除为删除节点前方的节点
//一次删除两个目的地 时间复杂度O(1)
{
	if(head==orgin&&orgin->nextdestination==terminal&&terminal->nextdestination==NULL)
		//若目的地只有当前两个节点
		return NULL;
	else
	{
		//先删除终点再删除起点
		if(terminal->nextdestination==NULL)
		//若终点为最后一个节点
		{
			solution.nexdest1->nextdestination=NULL;
		}
		else
		//若终点不为最后一个节点
		{
			if(solution.nexdest1==NULL)//若起点终点是当前前两个目的地
				return terminal->nextdestination;
			else
			{
				solution.nexdest1->nextdestination=solution.nexdest2;
			}
			
		}
		//删除起点
		if(solution.predest1==NULL&&solution.predest2!=NULL)
		{
			return orgin->nextdestination;//若起点为头结点
		}
		else if(solution.predest1!=NULL&&solution.predest2!=NULL)
		{
			solution.predest1->nextdestination=solution.predest2;
			return head;
		}
		else//若起点为最后一个节点
		{
			solution.predest1->nextdestination=NULL;
			return head;
		}
	}
}
way mintime(destination* ptr,int prex,int prey)//到下一个目的地的最短时间 
{
	struct Way result;//设置返回所需结构体 
	if(ptr->attribute==0)//判定下一个目的地是起点还是终点 
	{
		result.currenty=ptr->orderptr->resty;//下一个目的地为餐馆，并更新目的坐标 
		result.currentx=ptr->orderptr->restx+1;
	}
	else if(ptr->attribute==1)//下一个目的地为顾客，并更新目的坐标 
	{
		result.currentx=ptr->orderptr->eatx+1;
		result.currenty=ptr->orderptr->eaty;
	}
	if(result.currentx==17)//目的地为最后一行的情况 
	{
		result.currentx-=2;
	}
	result.time=abs(result.currenty-prey)/2+abs(result.currentx-prex)/2;//计算最短路径所需时间 
	return result;//返回函数值 
}
int changey(int y)
{
	if(y!=16)
	{
		return y+1;
	}
	else
	{
		return y-1;
	}
}
void renewrider(rider a[])//控制骑手移动 
{
	int i=0,desx,desy;
	int sign=0;//sign值为1，下两个目的地y相等 ,x不同 
	for(i=0;i<ridenumber;i++)//每一个骑手进行循环 
	{
		if(a[i].Destar!=NULL)//当骑手目的地序列不为空 
		{
			if(a[i].Destar->nextdestination!=NULL&&a[i].Destar->y==a[i].Destar->nextdestination->y&&a[i].Destar->x!=a[i].Destar->nextdestination->x)//下两个目的地y相等 ，x不同 
			{
				sign=1;
			}
			if(a[i].Destar->attribute==0)//该目的地为起点 
			{
				desx=a[i].Destar->orderptr->restx+1;
				desy=a[i].Destar->orderptr->resty;
			}
			else if(a[i].Destar->attribute==1)//该目的地为终点 
			{
				desx=a[i].Destar->orderptr->eatx+1;
				desy=a[i].Destar->orderptr->eaty;
			}
			if(desx==17)//目的地为最后一行情况 
			{
				desx-=2;
			}
			if(abs(a[i].x-desx)==1)
			{
				a[i].x+=(desx-a[i].x)/abs(desx-a[i].x);
				a[i].y+=(desy-a[i].y)/abs(desy-a[i].y);
			}
			else if(abs(a[i].y-desy)>2)//优先横向行走 
			{
				a[i].y+=2*(desy-a[i].y)/abs(desy-a[i].y);
			}
			else if(a[i].x!=desx)//判定需要转向 
			{
				if(abs(a[i].y-desy)==2)//转向控制 
				{
					a[i].x+=(desx-a[i].x)/abs(desx-a[i].x);
					a[i].y+=(desy-a[i].y)/abs(desy-a[i].y);
				}
				else if(abs(a[i].y-desy)==1)
				{
					if(abs(a[i].x-desx)==1&&sign==0)
					{
						a[i].x+=(desx-a[i].x)/abs(desx-a[i].x);
						a[i].y+=(desy-a[i].y)/abs(desy-a[i].y);//最后的转向 
					}
					else
					{
						a[i].x+=2*(desx-a[i].x)/abs(desx-a[i].x);	//纵向行走 
					}
				}
				else if(desy==a[i].y)
				{
					if(desy==16)
					{
						a[i].y-=1;
						a[i].x+=(desx-a[i].x)/abs(desx-a[i].x);
					}
					else
					{
						a[i].y+=1;
						a[i].x+=(desx-a[i].x)/abs(desx-a[i].x);
					}
				}
			}
			else if(a[i].x==desx&&desy-a[i].y!=0)//判定不需要转向 
			{
				a[i].y+=2*(desy-a[i].y)/abs(desy-a[i].y);
			}
			while((a[i].Destar!=NULL&&a[i].y==a[i].Destar->y&&a[i].x==changey(a[i].Destar->x))||(a[i].Destar!=NULL&&a[i].Destar->x==a[i].x&&sign==1))//判定到达下一个目的地
			{
				if(a[i].Destar->attribute==1)//该目的地为终点 
				{
					if(time-a[i].Destar->orderptr->ordertime<=30)//判断盈利 
					{
						a[i].finish+=1;
						money+=10;
					}
					if(time-a[i].Destar->orderptr->ordertime>30&&time-a[i].Destar->orderptr->ordertime<=60)//判定亏损 
					{
						a[i].overtime+=1;
						money-=50;
					}
					if(time-a[i].Destar->orderptr->ordertime>60)//判定破产 
					{
						money=-1;
					}
				}
				a[i].Destar=a[i].Destar->nextdestination;//销单 
				sign=0;
				a[i].destnum--;
			}
		}
	}
}
int isovertime(const riderptr ptr,int time)//判断此种插入方式是否超时 
{
	int prex=ptr->x;//初始化此种情况下骑手坐标 
	int prey=ptr->y;
	int Flag=1;//1表示不超时 0表示超时 
	int t=0;//初始化此支路时间 
	destinationptr p=ptr->Destar;
	while(p!=NULL)//目的地链表结束？ 
	{
		way funresult=mintime(p,prex,prey);
		if(p->attribute==0)//起点情况 
		{
			t+=funresult.time;//更新所需时间 
			prex=funresult.currentx;//更新骑手坐标 
			prey=funresult.currenty;
		}
		else if(p->attribute==1)//终点情况 
		{
			t+=funresult.time;//更新所需时间 
			if(t+time-p->orderptr->ordertime>30)//判断此订单在此种情况下是否超时 
			{
				Flag=0;
			}
			prex=funresult.currentx; //更新骑手坐标 
			prey=funresult.currenty;
		}
		p=p->nextdestination;//判断下一目的地 
	}
	return Flag;//返回是否超时 
}
void distribute(const orderptr head,st** ride)
{
	int i=0,j=0;
	struct overtimeornot
	{
		int buer;//判断是否含有不超时的策略
		st over;//记录超时策略
		st finish;//记录不超时策略
	};//记录每个骑手超时与不超时的时间花费最小的策略
	typedef struct overtimeornot ov;
	ov *a;
	a=(ov*)malloc(sizeof(ov)*(ridenumber+1));//记录每个骑手的超时与不超时的策略
	destinationptr p=NULL,q=NULL;
	p=(destinationptr)malloc(sizeof(destination));//p为订单起点指向目的地指针
	q=(destinationptr)malloc(sizeof(destination));//q为订单终点指向目的地指针
	p->x=head->restx;
	p->y=head->resty;
	p->nextdestination=NULL;
	p->attribute=0;
	p->orderptr=head;
	q->x=head->eatx;
	q->y=head->eaty;
	q->nextdestination=NULL;
	q->attribute=1;
	q->orderptr=head;//创建订单起点终点目的地信息
	while(i<ridenumber)//当（尚未遍历完所有骑手）
	{
		int min=10000,overmin=10000;//初始化最小距离为一个较大的数，该值用于记录此骑手最优策略对应的距离
		for(j=0;j<(R[i].destnum+1)*(R[i].destnum+2)/2;j++)
		//遍历当前骑手的所有目的地插入策略
		{
			R[i].Destar=insertdest(R[i].Destar,ride[i][j],p,q);
			//将两个目的地按策略插入目的地链表
			int bu;
			//判断是否超时
			a[i].buer=0;
			bu=isovertime(&R[i],time);
			if(bu)//若策略不超时
			{
				a[i].buer=1;
				if(ride[i][j].discost<min)
				{
					a[i].finish=ride[i][j];
					min=ride[i][j].discost;
				}
			}//记录时间不超时的策略里时间花费最少的策略
			else//若此策略超时
			{
				if(ride[i][j].discost<overmin)
				{
					a[i].over=ride[i][j];
					overmin=ride[i][j].discost;
				}			
			}//记录时间超时的策略里时间花费最少的策略
			R[i].Destar=deleted(R[i].Destar,ride[i][j],p,q);//复原目的地链表
		}
		i++;
	}
	int best=-1,overbest=-1,isover=0;
	int m;
	for(m=0;m<ridenumber;m++)//遍历所有骑手的最优策略
	{
		if(a[m].buer)
		{
			isover=1;//找到了不超时的策略
			if(best==-1)
			{
				best=m;
			}
			else
			{
				if(a[best].finish.discost>a[m].finish.discost)
				{
					best=m;
				}
			}
		}
		else
		{
			if(overbest==-1)
			{
				overbest=m;
			}
			else
			{
				if(a[overbest].over.discost>a[m].over.discost)
				{
					overbest=m;
				}
			}
			
		}
	}
	if(isover)//若有不超时的策略
	{
		R[best].Destar=insertdest(R[best].Destar,a[best].finish,p,q);	//将此策略插入骑手目的地链表
		i=best;
	}
	else//若所有骑手均超时
	{
		R[overbest].Destar=insertdest(R[overbest].Destar,a[overbest].over,p,q);	//将此策略插入骑手目的地链表
		i=overbest;
	}//分配给超时但时间花费最少的骑手
	R[i].destnum+=2;//目的地数量+2；
	//更新骑手目的地信息
}
orderptr letorder(orderptr headptr)//派单 
{
	orderptr head=headptr;
	st **ridecost;
	ridecost=(st**)malloc(sizeof(st*)*(ridenumber+1));
	while(head!=NULL&&head->ordertime==time)
	{
		sum++;
		ridecost=getmintime(head,ridecost);
		distribute(head,ridecost);
		head=head->nextorder;
	}
	return head;
}
void output()
{
	int i=0,finished=0,overtimed=0;
	printf("时间：%d\n",time);
	printf("钱：%d\n",money);
	printf("接单数：%d\n",sum);
	for(i=0;i<ridenumber;i++)
	{
		finished+=R[i].finish;
		overtimed+=R[i].overtime;
	}
	printf("完成数：%d\n",finished);
	printf("超时数：%d\n",overtimed);
	for(i=0;i<ridenumber;i++)
	{
		printf("骑手%d位置：%d,%d\n",i,R[i].x,R[i].y);
	}
}
void rideini(int x,int y)
{
	int i=ridenumber;
	R[i].Destar=NULL;
	R[i].finish=0;
	R[i].overtime=0;
	R[i].x=x;
	R[i].y=y;
	R[i].destnum=0;
	money-=300;
	ridenumber++;
}
int isover()
{
	int flag=0;
	int i; 
	for(i=0;i<ridenumber;i++)
		if(R[i].Destar!=NULL)
			flag=1;
	if(orderhead==NULL&&flag==0)
		return 0;
	else
		return 1;
}
void out()
{
	int a[18][18]={0};
	int i=0,j=0;
	for(i=0;i<ridenumber;i++)
	{
		a[R[i].x][R[i].y]=1;
		if(R[i].Destar!=NULL)
		{
			if(R[i].Destar->attribute==0)
				a[R[i].Destar->x][R[i].Destar->y]=-1;
			else
				a[R[i].Destar->x][R[i].Destar->y]=-2;
		}
	}
	for(i=0;i<35;i++)
	{
		for(j=0;j<9;j++)
		{
			if(i%4==0)
			{
				if(a[i/2][2*j+1])
					printf("—﹀—骑");//¤
				else
					printf("—﹀—  ");
			}
			if((i+3)%4==0)
			{
				if(a[(i-1)/2][2*j]==-1)
					printf("|餐馆|  ");
				else if(a[(i-1)/2][2*j]==-2)
					printf("|食客|  ");
				else
					printf("|    |  ");
			}
			if((i+2)%4==0)
			{
				if(a[(i-2)/2][2*j+1])
					printf("—︿—手");
				else
					printf("—︿");
			}
			if((i+1)%4==0)
			{
				if(a[i/2][2*j])
					printf("骑  手  ");
				else
					printf("        ");
			}
		}
		printf("\n");
	}
	Sleep(2000);
	system("cls");
}
int main()
{
	int i=0,j=0;
	orderhead=input();
	rideini(7,8);
	rideini(7,8);
	rideini(7,8);
	while(isover()&&money>=0)
	{
		while(money>=500&&ridenumber<20)
			rideini(7,8);
		orderhead=letorder(orderhead);//派单
		renewrider(R);//控制骑手移动，判断是否完成订单		
		out();//输出
		int h;
//		for(h=0;h<ridenumber;h++)
//		{
//			int k=0;
//			destinationptr p=R[h].Destar;
//			for(;p!=NULL;p=p->nextdestination)
//			{
//				printf("当前是骑手%d第%d个目的地 ",h,k++);
//				if(p->attribute==0)
//					printf("目的地是餐馆 ");
//				else
//					printf("目的地是食客 ");
//				printf("该目的地对应单号：%d",p->orderptr->number);
//				printf("目的地坐标：%d %d\n",p->x,p->y);
//			}
//		}
		time++;
	}
	if(money<0)
	{
		printf("ERROR");
	}
	return 0;
}

